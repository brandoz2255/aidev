"use client"

import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ImageIcon, Code, Brain, FileText, X, Clock, CheckCircle, AlertCircle, Cpu } from "lucide-react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { useInsightsStore, InsightEntry } from "@/stores/insightsStore"

interface MiscDisplayProps {
  screenAnalysis?: string
}

export default function MiscDisplay({ screenAnalysis }: MiscDisplayProps) {
  const { insights, addInsight, clearInsights } = useInsightsStore()
  const [selectedItem, setSelectedItem] = useState<InsightEntry | null>(null)

  // Don't clear insights on mount - this would clear reasoning content!
  // Insights are managed by the chat interface and should persist

  useEffect(() => {
    if (screenAnalysis) {
      addInsight({
        type: "analysis",
        status: "done",
        title: "Screen Analysis",
        content: screenAnalysis,
        model: "Blip AI"
      })
    }
  }, [screenAnalysis, addInsight])

  // Remove the simulation effect - insights will be generated by actual AI interactions

  const getIcon = (type: InsightEntry["type"]) => {
    switch (type) {
      case "thought":
        return <Brain className="w-4 h-4" />
      case "reasoning":
        return <Cpu className="w-4 h-4" />  // Different icon for reasoning models
      case "analysis":
        return <FileText className="w-4 h-4" />
      case "error":
        return <AlertCircle className="w-4 h-4" />
    }
  }

  const getTypeColor = (type: InsightEntry["type"]) => {
    switch (type) {
      case "thought":
        return "border-yellow-500 text-yellow-400"
      case "reasoning":
        return "border-purple-500 text-purple-400"
      case "analysis":
        return "border-blue-500 text-blue-400"
      case "error":
        return "border-red-500 text-red-400"
    }
  }

  const getStatusIcon = (status: InsightEntry["status"]) => {
    switch (status) {
      case "thinking":
        return <Clock className="w-3 h-3 animate-spin" />
      case "done":
        return <CheckCircle className="w-3 h-3" />
      case "error":
        return <AlertCircle className="w-3 h-3" />
    }
  }

  const getStatusColor = (status: InsightEntry["status"]) => {
    switch (status) {
      case "thinking":
        return "text-yellow-400"
      case "done":
        return "text-green-400"
      case "error":
        return "text-red-400"
    }
  }

  return (
    <Card className="bg-gray-900/50 backdrop-blur-sm border-blue-500/30">
      <div className="p-3 border-b border-blue-500/30 flex justify-between items-center">
        <h3 className="text-lg font-semibold text-blue-300">AI Insights</h3>
        {insights.length > 0 && (
          <Button
            onClick={clearInsights}
            size="sm"
            variant="ghost"
            className="text-gray-400 hover:text-white text-xs"
          >
            Clear
          </Button>
        )}
      </div>

      <div className="p-3 max-h-96 overflow-y-auto">
        <AnimatePresence>
          {insights.map((insight) => (
            <motion.div
              key={insight.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="mb-3 last:mb-0"
            >
              <div
                className="bg-gray-800/50 rounded-lg p-3 cursor-pointer hover:bg-gray-800/70 transition-colors"
                onClick={() => setSelectedItem(insight)}
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline" className={`text-xs ${getTypeColor(insight.type)}`}>
                      {getIcon(insight.type)}
                      <span className="ml-1 capitalize">{insight.type}</span>
                    </Badge>
                    <div className={`flex items-center space-x-1 ${getStatusColor(insight.status)}`}>
                      {getStatusIcon(insight.status)}
                      <span className="text-xs">{insight.status}</span>
                    </div>
                    <span className="text-sm font-medium text-gray-300">{insight.title}</span>
                    {insight.model && (
                      <span className="text-xs text-gray-500">({insight.model})</span>
                    )}
                  </div>
                  <span className="text-xs text-gray-500">{insight.timestamp.toLocaleTimeString()}</span>
                </div>
                <p className="text-xs text-gray-400 line-clamp-2">{insight.content}</p>
                {insight.result && insight.status === 'done' && (
                  <div className="mt-2 pt-2 border-t border-gray-700">
                    <p className="text-xs text-green-400 line-clamp-1">Result: {insight.result}</p>
                  </div>
                )}
              </div>
            </motion.div>
          ))}
        </AnimatePresence>

        {insights.length === 0 && (
          <div className="text-center text-gray-500 py-8">
            <Brain className="w-8 h-8 mx-auto mb-2 opacity-50" />
            <p className="text-sm font-medium mb-2">Real-Time AI Thought Process</p>
            <p className="text-xs text-gray-400 mb-1">• See the AI&apos;s reasoning before it responds</p>
            <p className="text-xs text-gray-400 mb-1">• Watch Qwen2.VL analyze your prompts</p>
            <p className="text-xs text-gray-400 mb-1">• View reasoning model step-by-step thinking</p>
            <p className="text-xs text-gray-500 mt-3">Start a conversation to see AI insights in action</p>
          </div>
        )}
      </div>

      {/* Modal for detailed view */}
      <AnimatePresence>
        {selectedItem && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
            onClick={() => setSelectedItem(null)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-900 rounded-lg border border-blue-500/30 max-w-2xl w-full max-h-[80vh] overflow-hidden"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="p-4 border-b border-blue-500/30 flex justify-between items-center">
                <div className="flex items-center space-x-2">
                  <Badge variant="outline" className={`${getTypeColor(selectedItem.type)}`}>
                    {getIcon(selectedItem.type)}
                    <span className="ml-1 capitalize">{selectedItem.type}</span>
                  </Badge>
                  <div className={`flex items-center space-x-1 ${getStatusColor(selectedItem.status)}`}>
                    {getStatusIcon(selectedItem.status)}
                    <span className="text-sm">{selectedItem.status}</span>
                  </div>
                  <h3 className="text-lg font-semibold text-white">{selectedItem.title}</h3>
                  {selectedItem.model && (
                    <span className="text-sm text-gray-400">({selectedItem.model})</span>
                  )}
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedItem(null)}
                  className="text-gray-400 hover:text-white"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
              <div className="p-4 overflow-y-auto max-h-96 space-y-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-300 mb-2">Thought Process:</h4>
                  <p className="text-gray-300 whitespace-pre-wrap">{selectedItem.content}</p>
                </div>
                {selectedItem.result && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-300 mb-2">Result:</h4>
                    <p className="text-gray-300 whitespace-pre-wrap bg-gray-800 rounded p-3">{selectedItem.result}</p>
                  </div>
                )}
                <div className="text-xs text-gray-500">
                  <p>Timestamp: {selectedItem.timestamp.toLocaleString()}</p>
                  {selectedItem.model && <p>Model: {selectedItem.model}</p>}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </Card>
  )
}
